{"version":3,"sources":["components/shared/Badge.js","components/FoodRecipe.js","components/SearchForm.js","components/FoodSearch.js","components/ReviewForm.js","components/Food.js","App.js","serviceWorker.js","index.js"],"names":["Badge","styled","span","RECIPE","gql","FoodRecipe","newFoodSearch","useQuery","loading","error","data","map","id","name","recipe1","recipe2","key","to","SearchFormStyle","div","SearchForm","inputVal","onChange","onSearch","value","type","onClick","SEARCHQRY","FoodSearch","useState","inputval","setInputval","useLazyQuery","search","class","e","target","variables","match","ReviewFormStyle","ReviewForm","onSubmit","FOOD","ADDREVIEW","Food","params","setInputVal","useSubscription","useMutation","addReview","FoodRecipe_by_pk","Reviews","className","foodId","body","then","catch","message","review","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","App","ApolloProvider","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.3e5130ca.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Badge = styled.span `\n    display:inline-block;\n    padding: 0.5rem 1rem;\n    margin:1rem;\n    font-size:1.6rem;\n    font-weight:600;\n    line-heignt:1;\n    text-align:center;\n    white-space:nowrap;\n    vertical-align:middle;\n    border-radius:0.25rem;\n    color: #fff;\n    background-color:#17a2b8;\n`;","import React from 'react';\nimport { useQuery,gql } from '@apollo/client';\nimport {Badge} from \"./shared/Badge\";\nimport {Link} from 'react-router-dom';\n\nconst RECIPE = gql`\n{\n    FoodRecipe {\n      id\n      name\n      recipe1\n      recipe2\n    }\n  }`;\n\nexport default function FoodRecipe({newFoodSearch}){\n    const { loading,error,data } = useQuery(RECIPE);\n\n    const renderFood = (food) => {\n      return food.map(({id,name,recipe1,recipe2}) =>(\n      <div key={id}>\n        <Link to = {`/foodrecipe/${id}`}>\n          <p>\n            {name}  <Badge>{recipe1} | {recipe2}</Badge>\n          </p>\n        </Link>\n      </div>\n        ));\n    };\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error</p>;\n\n    return renderFood(newFoodSearch || data.FoodRecipe);\n    // FoodRecipe is json response in heroku\n  //  return (\n  //       <>\n  //       {data.FoodRecipe.map(({id,name,recipe1,recipe2}) =>(\n  //       <div key={id}>\n  //           <p>\n  //               {name} | <Badge>{recipe1} | {recipe2}</Badge>\n  //           </p>\n  //       </div>\n  //       ))} \n  //       </>)\n}","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst SearchFormStyle = styled.div`\n    align-items:center;\n    > button{\n        margin-left:1rem;\n        background-color: rgb(0, 0,0,0.75);\n        color: white;\n        padding: 1rem 2rem;\n        border: 1px solid rgb(0, 0,0,0.75);\n        border-radius: 10px;\n        font-size: 1.4rem;\n        cursor: pointer;\n    }\n    > input{font-size: 1.3rem;\n    padding:0.5rem 2rem;\n    line-height: 2.8rem;\n    border-radius:10px;\n    border:1px solid #ddd;\n    margin-bottom: 1rem;\n    }\n`;\n\nconst SearchForm =({inputVal,onChange,onSearch}) =>{\n    return(\n        <SearchFormStyle>\n            <input value={inputVal} onChange={onChange} type=\"text\"></input>\n            <button onClick={onSearch}>Search</button>\n        </SearchFormStyle>\n    );\n}\n\nexport default SearchForm;","import React, { useState } from 'react';\nimport FoodRecipe from './FoodRecipe';\nimport SearchForm from './SearchForm';\nimport { useLazyQuery, gql } from \"@apollo/client\";\n\nconst SEARCHQRY = gql`\nquery Search($match:String) {\n    FoodRecipe(order_by: {name: asc}, where: {name: {_ilike: $match}}) {\n      name\n      id\n      recipe1\n      recipe2\n    }\n  }\n`;\n\nconst FoodSearch = () =>{\n    const [inputval,setInputval] = useState(\"\");\n    const [search,{loading,error,data}] = useLazyQuery(SEARCHQRY);\n    return(\n        <div class=\"content\">\n            <SearchForm\n                inputval = {inputval}\n                onChange = {(e) => setInputval(e.target.value)}\n                onSearch = {() => search({variables:{match:`%${inputval}%`}})}\n            />\n            <FoodRecipe\n                newFoodSearch = {data ? data.FoodRecipe: null}\n            />\n        </div>\n    )\n}\n\nexport default FoodSearch;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ReviewFormStyle = styled.div`\nalign-items:center;\n> button{\n    margin-left:1rem;\n    background-color: rgb(0, 0,0,0.75);\n    color: white;\n    padding: 0.8rem 2rem;\n    border: 1px solid rgb(0, 0,0,0.75);\n    border-radius: 10px;\n    font-size: 1.4rem;\n    cursor: pointer;\n}\n> input{\n    font-size: 1.3rem;\n    padding:0.5rem 2rem;\n    line-height: 1.8rem;\n    border-radius:10px;\n    border:1px solid #ddd;\n    margin-bottom: 1rem;\n    }\n`;\n\nconst ReviewForm = ({inputVal,onChange,onSubmit}) =>{\n    return(\n        <ReviewFormStyle>\n            <input type=\"text\" value={inputVal} onChange={onChange}/>\n            <button onClick={onSubmit}>Post</button>\n        </ReviewFormStyle>\n    )\n\n}\n\nexport default ReviewForm;","import React,{useState} from 'react';\nimport { useSubscription,useMutation, gql } from '@apollo/client';\nimport {Badge} from './shared/Badge';\nimport ReviewForm from './ReviewForm';\n\nconst FOOD = gql`\nsubscription MyQuery($id:uuid!) {\n    FoodRecipe_by_pk(id:$id ) {\n      name\n      recipe1\n      recipe2\n      Reviews(order_by:{created_at:desc}) {\n        body\n        food_id\n      }\n    }\n  }\n`;\n\nconst ADDREVIEW = gql`\n    mutation MyMutation($body:String!,$foodId:uuid!) {\n        insert_Reviews(objects: {body:$body , food_id:$foodId }) {\n        affected_rows\n        }\n    }\n`;\n\nconst Food = ({\n    match:{\n        params:{ id }\n    }\n}) => {\n    const [inputVal,setInputVal] = useState(\"\");\n    const {loading,error,data} = useSubscription(FOOD,{variables:{id}});\n    const [addReview] = useMutation(ADDREVIEW);\n    if(loading) return <p>Loading...</p>;\n    if(error) return <p>Error...</p>;\n\n    const {name,recipe1,recipe2,Reviews} = data.FoodRecipe_by_pk;\n\n    return (\n        <div className=\"content\">\n            <h3>\n            {name}<Badge>{recipe1}|{recipe2}</Badge>\n            </h3>\n            <h3>Reviews</h3>\n            <ReviewForm\n            inputVal = {inputVal}\n            onChange = {(e) => setInputVal(e.target.value)}\n            onSubmit={()=>{\n                addReview({variables:{foodId:id,body:inputVal}})\n                .then(()=> setInputVal(\"\"))\n                .catch((e)=> {\n                    setInputVal(e.message);\n                })\n            }}\n            />\n            <p>\n                {Reviews.map((review)=>(\n                    <ul >\n                        <li key={review.id}>{review.body}</li>\n                    </ul>\n                ))}\n            </p>\n\n        </div>\n    )\n\n}\n\nexport default Food;","import React from 'react';\nimport './App.css';\nimport { ApolloProvider} from '@apollo/client';\nimport {ApolloClient,HttpLink,InMemoryCache,split } from '@apollo/client';\nimport FoodSearch from './components/FoodSearch';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Food from \"./components/Food\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/link-ws\";\n// import FoodRecipe from \"./components/FoodRecipe\";\n// import SearchForm  from  \"./components/SearchForm\";\n\nconst GRAPHQL_ENDPOINT = \"item-adder.herokuapp.com/v1/graphql\";\n\nconst httpLink = new HttpLink({\n  uri:`https://${GRAPHQL_ENDPOINT}`\n});\n\n\n\nconst wsLink = new WebSocketLink({\n  uri:`wss://${GRAPHQL_ENDPOINT}`,\n  options:{\n    reconnect:true\n  }\n});\n\nconst splitLink = split(\n  ({query}) => {\n    const definition = getMainDefinition(query);\n    return(\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n  })\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <ApolloProvider client ={client}>\n        <div className=\"container\">\n          <header><h1 className=\"title\">Food Recipe</h1></header>\n          <Switch>\n            <Route path=\"/foodrecipe/:id\" component={Food} />\n            <Route path=\"/\" component={FoodSearch} />\n          </Switch>\n        </div>\n      </ApolloProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}